#include <iostream>
#include <omp.h>
#include <chrono>

using namespace std;

int main() {
    int** matrix;
    int n = 1000;
    matrix = new int* [n];
    int* vector = new int[n];
    int* res = new int[n];

    for (int i = 0; i < n; i++) {
        matrix[i] = new int[n];
        vector[i] = rand() % 100;
        for (int j = 0; j < n; j++) {
            matrix[i][j] = rand() % 100;
        }
    }

    auto begin = chrono::steady_clock::now();
    for (int i = 0; i < n; i++) {
        res[i] = 0;
        for (int j = 0; j < n; j++) {
            res[i] += matrix[i][j] * vector[j];
        }
    }
    auto end = chrono::steady_clock::now();
    printf("IN SERIES TIME = %d\n\n", chrono::duration_cast<chrono::nanoseconds>(end - begin));

    begin = chrono::steady_clock::now();
#pragma omp parallel for schedule(static, 5)
    for (int i = 0; i < n; i++) {
        res[i] = 0;
        for (int j = 0; j < n; j++) {
            res[i] += matrix[i][j] * vector[j];
        }
    }
    end = chrono::steady_clock::now();
    printf("STATIC TIME = %d\n", chrono::duration_cast<chrono::nanoseconds>(end - begin));

    begin = chrono::steady_clock::now();
#pragma omp parallel for schedule(dynamic, 4)
    for (int i = 0; i < n; i++) {
        res[i] = 0;
        for (int j = 0; j < n; j++) {
            res[i] += matrix[i][j] * vector[j];
        }
    }
    end = chrono::steady_clock::now();
    printf("DYNAMIC TIME = %d\n", chrono::duration_cast<chrono::nanoseconds>(end - begin));

    begin = chrono::steady_clock::now();
#pragma omp parallel for schedule(guided, 6)
    for (int i = 0; i < n; i++) {
        res[i] = 0;
        for (int j = 0; j < n; j++) {
            res[i] += matrix[i][j] * vector[j];
        }
    }
    end = chrono::steady_clock::now();
    printf("GUIDED TIME = %d\n", chrono::duration_cast<chrono::nanoseconds>(end - begin));

    begin = chrono::steady_clock::now();
#pragma omp parallel for schedule(runtime)
    for (int i = 0; i < n; i++) {
        res[i] = 0;
        for (int j = 0; j < n; j++) {
            res[i] += matrix[i][j] * vector[j];
        }
    }
    end = chrono::steady_clock::now();
    printf("AUTO TIME = %d\n", chrono::duration_cast<chrono::nanoseconds>(end - begin));
}
